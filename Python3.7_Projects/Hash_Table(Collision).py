#Hash Table Implementation (of size 10)
#Creation of table with ten slots initialized to key word None
#table = [None] * 10
#print (table)
#print ("\n")

#table[0]='Start'
#table[9]="End"

#Test Table
#print (table)

#Creating Hash Function
def hashing_function(x):
#incase desired result is printing value modulus 10
    #print(x % 10)
#else return value modulus 10
    return(x % 10)
#always returns a value between 0 and 9
#perfect for hash table of size 10

#Test Hash Function Input
# print ("\n")
# print(hashing_function(12))

#Hint: CTRL + / to comment multiple lines

# class HashInsert:
#     def __init__(self, value):
#         self.value = value

#Insert to Hash Table Function
def HashInsert(table, key, value):
    #given a table, key and value
    #pass to the index/location of the table a value (generated by the key)
    #Note: hashing_function GENERATES the actual key

    #N.B.: Append necessary since indexes hold lists now and not variables
    #Variables assigned values
    #Lists appended values
    table[hashing_function(key)].append(value)

#Standard Table Implementation
table2 = [None] * 10

#Collision Table Implementation
table3 = [ [] for _ in range(10) ]


#User Prompting
response = "yes"
while (response == "yes"):
    print("Insert a value into the Hash Table:")
    #tvalue = 0
    tvalue = int(input())

    #Insert
    HashInsert(table3, tvalue, tvalue)
    #Print Table
    print(table3)
    #Request additional values
    print("Anymore values? (yes or no)")
    response = input()




#Concise Hash Table Implementation

# def hashing_function(x):
#     return(x % 10)
#
# def HashInsert(table, key, value):
#     table[hashing_function(key)].append(value)
#
# table3 = [ [] for _ in range(10)]
#
#
# response = "yes"
# while (response == "yes"):
#     print("Insert a value into the collision less Hash Table:")
#     tvalue = int(input())
#     HashInsert(table3, tvalue, tvalue)
#     print(table3)
#     print("Anymore values? (yes or no)")
#     response = input()

